import base64
import json

import requests
import psycopg2
from django.http import JsonResponse
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.csrf import ensure_csrf_cookie
from .models import SawMill
from django.views.decorators.http import require_GET
from django.db import connection
import os
from django.conf import settings

from telegram import Bot
import asyncio


# Create your views here.

def index(request):
    return render(request, 'index.html')


def catalog(request):
    return render(request, 'catalog.html')


def cart(request):
    return render(request, 'cart.html')


def delivery(request):
    return render(request, 'delivery_page.html')


@require_GET
def return_data_on_catalog(request):
    try:
        with connection.cursor() as cursor:
            cursor.execute(
                'SELECT id, category, size, pieces_per_cube, price_1s_piece, price_1s_cube, price_2s_piece, price_2s_cube, photo FROM sawmill.products')

            products = []
            for row in cursor.fetchall():
                id, category, size, pieces_per_cube, price_1s_piece, price_1s_cube, price_2s_piece, price_2s_cube, photo = row

                photo_filename = None
                photo_url = None

                if photo:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö photo
                    if isinstance(photo, bytes):
                        # –ï—Å–ª–∏ —ç—Ç–æ –±–∞–π—Ç—ã, –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                        try:
                            photo_filename = photo.decode('utf-8')
                            print(f"–¢–æ–≤–∞—Ä {id}: –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ bytes - {photo_filename}")
                        except UnicodeDecodeError:
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            print(f"–¢–æ–≤–∞—Ä {id}: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –±–∏–Ω–∞—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                            photo_filename = None
                    elif isinstance(photo, str):
                        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
                        photo_filename = photo
                        print(f"–¢–æ–≤–∞—Ä {id}: –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ - {photo_filename}")
                    else:
                        print(f"–¢–æ–≤–∞—Ä {id}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è photo: {type(photo)}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                if photo_filename:
                    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                    photo_filename = photo_filename.strip()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                    file_path = os.path.join(settings.MEDIA_ROOT, photo_filename)
                    if os.path.exists(file_path):
                        photo_url = f'{settings.MEDIA_URL}{photo_filename}'
                        print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
                    else:
                        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                        for root, dirs, files in os.walk(settings.MEDIA_ROOT):
                            if photo_filename in files:
                                relative_path = os.path.relpath(os.path.join(root, photo_filename), settings.MEDIA_ROOT)
                                photo_url = f'{settings.MEDIA_URL}{relative_path}'
                                print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤: {relative_path}")
                                break

                products.append({
                    "id": id,
                    "category": category,
                    "size": size,
                    "pieces_per_cube": pieces_per_cube,
                    "price_1s_piece": float(price_1s_piece) if price_1s_piece else None,
                    "price_1s_cube": float(price_1s_cube) if price_1s_cube else None,
                    "price_2s_piece": float(price_2s_piece) if price_2s_piece else None,
                    "price_2s_cube": float(price_2s_cube) if price_2s_cube else None,
                    "photo_url": photo_url
                })

        return JsonResponse({"data": products})

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return JsonResponse({"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}"}, status=500)


async def send_message_to_telegram(order_data, request):
    referer = request.META.get("HTTP_REFERER")
    bot_token = '8193385627:AAHmm-KIszSsL89dkiyhJF7ZS6OSCaxnbj0'
    chat = '726803747'
    # chat_id = ['549727261', '726803747']
    # for chat in chat_id:
    #     continue
    bot = Bot(token=bot_token)

    items_text = ""

    if 'items' in order_data and len(order_data['items']) > 0:
        items_text = "\n".join(
            [f"{item['displayName']} - {item['quantity']} —à—Ç. x {item['price']} ‚ÇΩ"
             for item in order_data['items']]
        )

    print(f'items_text: {items_text}')
    message = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"–ò–º—è: {order_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
        f"Email: {order_data['email']}\n"
        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['deliveryType']}\n"
        f"–ì–æ—Ä–æ–¥: {order_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('message', '–ù–µ—Ç')}\n\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{items_text}\n\n"
        f"–ò—Ç–æ–≥–æ: {order_data['total']} ‚ÇΩ"
    )

    if 'items' in order_data and len(order_data['items']) > 0:
        message += f"–¢–æ–≤–∞—Ä—ã: {items_text}\n\n –ò—Ç–æ–≥–æ: {order_data['total']}"
    else:
        message += f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞'"

    if 'delivery_page' in referer:
        message = (
            f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–æ—Ä–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏!\n"
            f"{order_data['name']}\n"
            f"{order_data['phone']}\n"
            f"{order_data['email']}\n"
            f"{order_data['deliveryType']}\n"
            f"{order_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('message', '–ù–µ—Ç')}"
        )

    await bot.send_message(chat_id=chat, text=message)

@csrf_exempt
def create_order(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            print(f'load data json: {data}')
            serialize_data = {
                'name': data.get('name', ''),
                'phone': data.get('phone', ''),
                'email': data.get('email', ''),
                'deliveryType': data.get('deliveryType', ''),
                'city': data.get('city', ''),
                'message': data.get('message', ''),
                'items': [
                    {
                        'displayName': item.get('displayName', ''),
                        'quantity': item.get('quantity', 0),
                        'price': item.get('price', 0),
                    }
                    for item in data.get('items', [])
                ],
                'total': data.get('total', 0),
            }
            asyncio.run(send_message_to_telegram(serialize_data, request))
            return JsonResponse({'status': 'success'})
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}')
            return JsonResponse({'status': 'failure', 'message': str(e)})
    else:
        print(f'–û—à–∏–±–∫–∞: method not supported')
        return JsonResponse({'status': 'failure', 'message': 'method not supported'})
