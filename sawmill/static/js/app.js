document.addEventListener('DOMContentLoaded', function() {
    // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const navMenu = document.querySelector('.nav-menu');

    if (mobileMenuToggle && navMenu) {
        mobileMenuToggle.addEventListener('click', function() {
            navMenu.classList.toggle('active');
            const isOpen = navMenu.classList.contains('active');
            mobileMenuToggle.setAttribute('aria-expanded', isOpen);
            mobileMenuToggle.innerHTML = isOpen ? '‚úï' : '‚ò∞';
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        const navLinks = navMenu.querySelectorAll('a');
        navLinks.forEach(link => {
            link.addEventListener('click', function() {
                navMenu.classList.remove('active');
                mobileMenuToggle.setAttribute('aria-expanded', 'false');
                mobileMenuToggle.innerHTML = '‚ò∞';
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    function smoothScrollTo(targetElement) {
        if (targetElement) {
            const headerHeight = document.querySelector('.header')?.offsetHeight || 80;
            const targetPosition = targetElement.offsetTop - headerHeight;

            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        }
    }

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    const anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);

            if (targetElement) {
                smoothScrollTo(targetElement);
            }
        });
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (Intersection Observer)
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('fade-in');
            }
        });
    }, observerOptions);

    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const animateElements = document.querySelectorAll('.service-card, .stat-item, .product-item, .about__text, .about__image');
    animateElements.forEach(element => {
        observer.observe(element);
    });

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –¥–ª—è hero —Å–µ–∫—Ü–∏–∏
    const heroBackground = document.querySelector('.hero__background');
    if (heroBackground) {
        window.addEventListener('scroll', function() {
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.5;
            heroBackground.style.transform = `translateY(${rate}px)`;
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notif => notif.remove());

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;

        const bgColor = type === 'success' ? '#9ACD32' :
                       type === 'error' ? '#dc3545' :
                       type === 'info' ? '#17a2b8' : '#8B4513';

        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${bgColor};
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            z-index: 1000;
            max-width: 350px;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            font-weight: 500;
            font-size: 14px;
            line-height: 1.4;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const contactForm = document.querySelector('.contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const name = formData.get('name');
            const phone = formData.get('phone');
            const message = formData.get('message');

            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (!name || !name.trim()) {
                showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', 'error');
                document.getElementById('name').focus();
                return;
            }

            if (!phone || !phone.trim()) {
                showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
                document.getElementById('phone').focus();
                return;
            }

            // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;

            submitButton.disabled = true;
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...';
            submitButton.style.opacity = '0.7';

            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            setTimeout(() => {
                showNotification('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
                this.reset();
                submitButton.disabled = false;
                submitButton.textContent = originalText;
                submitButton.style.opacity = '1';
            }, 1500);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
    const heroCta = document.querySelector('.hero__cta');
    if (heroCta) {
        heroCta.addEventListener('click', function(e) {
            e.preventDefault();
            const contactsSection = document.getElementById('contacts');
            if (contactsSection) {
                smoothScrollTo(contactsSection);
                // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    const nameField = document.getElementById('name');
                    if (nameField) {
                        nameField.focus();
                    }
                }, 500);
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö CTA –∫–Ω–æ–ø–æ–∫
    const ctaButtons = document.querySelectorAll('.btn--primary, .btn--secondary');
    ctaButtons.forEach(button => {
        // –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ö –∏ hero –∫–Ω–æ–ø–∫—É
        if (!button.closest('form') && !button.classList.contains('hero__cta')) {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const buttonText = this.textContent.toLowerCase();

                if (buttonText.includes('–∫–∞—Ç–∞–ª–æ–≥')) {
                    showNotification('üìã –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.', 'info');
                } else {
                    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
                    const contactsSection = document.getElementById('contacts');
                    if (contactsSection) {
                        smoothScrollTo(contactsSection);
                    }
                }
            });
        }
    });

    // –ê–∫—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-menu a[href^="#"]');

    function updateActiveNav() {
        const scrollPos = window.scrollY + 150; // –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —à–∞–ø–∫–∏

        sections.forEach(section => {
            const top = section.offsetTop;
            const height = section.offsetHeight;
            const id = section.getAttribute('id');

            if (scrollPos >= top && scrollPos < top + height) {
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${id}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        .nav-menu a.active {
            background-color: rgba(255, 255, 255, 0.15) !important;
            color: #DAA520 !important;
            border-radius: 6px;
        }

        .notification {
            font-family: var(--font-family-base, system-ui, sans-serif);
        }
    `;
    document.head.appendChild(style);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    window.addEventListener('scroll', updateActiveNav);
    updateActiveNav(); // –í—ã–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª)
    const statNumbers = document.querySelectorAll('.stat-item__number');

    const animateNumbers = (entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const target = entry.target;
                const text = target.textContent;
                const finalNumber = parseInt(text.replace(/\D/g, '')) || 0;
                const suffix = text.replace(/\d/g, '');

                let currentNumber = 0;
                const increment = Math.max(1, Math.ceil(finalNumber / 30));

                const timer = setInterval(() => {
                    currentNumber += increment;
                    if (currentNumber >= finalNumber) {
                        currentNumber = finalNumber;
                        clearInterval(timer);
                    }
                    target.textContent = currentNumber + suffix;
                }, 50);

                // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                numberObserver.unobserve(target);
            }
        });
    };

    const numberObserver = new IntersectionObserver(animateNumbers, {
        threshold: 0.5
    });

    statNumbers.forEach(number => {
        numberObserver.observe(number);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç hover –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
    const serviceCards = document.querySelectorAll('.service-card');
    serviceCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });

        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });

    // –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = document.querySelectorAll('img');
    images.forEach(img => {
        img.addEventListener('load', function() {
            this.style.opacity = '1';
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        img.style.opacity = '0';
        img.style.transition = 'opacity 0.3s ease';

        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if (img.complete) {
            img.style.opacity = '1';
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏" –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ hero
    const heroTitle = document.querySelector('.hero__title');
    if (heroTitle) {
        const originalText = heroTitle.textContent;
        heroTitle.textContent = '';
        heroTitle.style.borderRight = '2px solid #DAA520';

        let i = 0;
        const typeWriter = () => {
            if (i < originalText.length) {
                heroTitle.textContent += originalText.charAt(i);
                i++;
                setTimeout(typeWriter, 100);
            } else {
                // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏
                setTimeout(() => {
                    heroTitle.style.borderRight = 'none';
                }, 500);
            }
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(typeWriter, 1000);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.addEventListener('keydown', function(e) {
        // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
        if (e.key === 'Escape' && navMenu && navMenu.classList.contains('active')) {
            navMenu.classList.remove('active');
            mobileMenuToggle.setAttribute('aria-expanded', 'false');
            mobileMenuToggle.innerHTML = '‚ò∞';
        }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
        console.log('üå≤ –õ–µ—Å–ü–∏–ª–°—Ç—Ä–æ–π-–ù–ù: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç!');
        console.log('üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +7 (831) 123-45-67');
    }, 2000);
});